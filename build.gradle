group 'com.github.jamsa'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'jetty'
//apply plugin: 'idea'

sourceCompatibility = 1.6
targetCompatibility = 1.6

repositories {
    mavenLocal()
    mavenCentral()
    //maven{ url 'http://maven.ibiblio.org/maven2/'}
}

configurations {
    //compile.exclude module: 'commons'
    all*.exclude group: 'commons-logging', module: 'commons-logging'
    all*.exclude group: 'log4j', module: 'log4j'
    mybatisGenerator
}

sourceSets.main.resources{
    srcDirs 'src/main/java','resources'
    include '**/*.xml','**/*.properties'
}

dependencies {
    compile ('ch.qos.logback:logback-classic:1.1.3')
    compile ('org.slf4j:jcl-over-slf4j:1.7.7')
    compile ('javax.servlet:jstl:1.2')
    //compile ('com.h2database:h2:1.4.191')
    compile ('mysql:mysql-connector-java:5.1.38')
    //compile ('org.hibernate:hibernate-core:4.3.8.Final')
    compile ('org.mybatis:mybatis:3.2.8')
    compile ('org.mybatis:mybatis-spring:1.2.2')
    compile ('org.springframework:spring-webmvc:4.1.6.RELEASE')
    //compile ('org.springframework:spring-orm:4.1.6.RELEASE')
    compile ('org.springframework:spring-jdbc:4.1.6.RELEASE')
    compile ('commons-dbcp:commons-dbcp:1.4')
    //compile ('org.apache.velocity:velocity:1.7')
    //compile files('./lib/ojdbc14-10.2.0.3.0.jar')
    //testCompile files('./lib/mybatis-generator-core-1.3.3.jar')
    testCompile ('org.springframework:spring-test:4.1.6.RELEASE')
    testCompile ('junit:junit:4.11')

    compile ('org.mybatis.generator:mybatis-generator-core:1.3.3')

    mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.3'
    mybatisGenerator 'mysql:mysql-connector-java:5.1.38'
    mybatisGenerator files('./build/classes/main')
    //mybatisGenerator 'tk.mybatis:mapper:3.3.2'
}

jettyRun{
    contextPath = "rap"
    httpPort = 7000
}

jettyRunWar{
    contextPath = "rap"
    httpPort = 7000
}

def getDbProperties = {
    def properties = new Properties()
    file("src/main/resources/config.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }

    properties;

}


task mybatisGenerate << {
    def properties = getDbProperties()

    ant.properties['targetProject'] = projectDir.path
    ant.properties['driverClass'] = properties.getProperty("jdbc.driver")
    ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
    ant.properties['username'] = properties.getProperty("jdbc.username")
    ant.properties['password'] = properties.getProperty("jdbc.password")
    ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
    ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
    ant.properties['modelPackage'] = this.modelPackage
    ant.properties['mapperPackage'] = this.mapperPackage
    ant.properties['sqlMapperPackage'] = this.sqlMapperPackage

    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )

    ant.mbgenerator(overwrite: true,
            configfile: 'src/main/resources/generator-config.xml',
            verbose: true) {
        propertyset {
            propertyref(name: 'targetProject')
            propertyref(name: 'username')
            propertyref(name: 'driverClass')
            propertyref(name: 'connectionURL')
            propertyref(name: 'password')
            propertyref(name: 'src_main_java')
            propertyref(name: 'src_main_resources')
            propertyref(name: 'modelPackage')
            propertyref(name: 'mapperPackage')
            propertyref(name: 'sqlMapperPackage')

        }
    }
}

//mybatisGenerate.dependsOn compileJava